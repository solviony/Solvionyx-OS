name: Build & Release Solvionyx OS — Aurora Series (All Editions)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write  # Needed for GitHub Releases

jobs:
  build:
    name: 🧠 Solvionyx OS — Aurora (${{ matrix.edition }})
    runs-on: ubuntu-24.04
    timeout-minutes: 120

    strategy:
      matrix:
        edition: [gnome, xfce, kde]
      fail-fast: false

    steps:
    # ---------------------------------------------------
    # 1. Checkout Repository
    # ---------------------------------------------------
    - name: 🧩 Checkout repository
      uses: actions/checkout@v4

    # ---------------------------------------------------
    # 2. Clean Workspace
    # ---------------------------------------------------
    - name: 🧹 Clean workspace
      run: |
        echo "🧹 Cleaning previous build..."
        sudo rm -rf solvionyx_build || true
        echo "✅ Workspace ready."

    # ---------------------------------------------------
    # 3. Install Dependencies
    # ---------------------------------------------------
    - name: ⚙️ Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          debootstrap grub-pc-bin grub-efi-amd64-bin grub-common \
          syslinux isolinux syslinux-utils mtools xorriso squashfs-tools \
          rsync systemd-container genisoimage dosfstools xz-utils jq curl unzip \
          plymouth plymouth-themes plymouth-label python3-pip

        echo "☁️ Checking AWS CLI..."
        if ! command -v aws &> /dev/null; then
          curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -qq awscliv2.zip
          sudo ./aws/install
        fi
        echo "✅ Dependencies installed and ready."

    # ---------------------------------------------------
    # 4. Run Solvionyx ISO Builder
    # ---------------------------------------------------
    - name: 💿 Run Solvionyx ISO Builder (${{ matrix.edition }})
      run: |
        chmod +x build_iso_debian.sh
        echo "🚀 Building Solvionyx Aurora for edition: ${{ matrix.edition }}"
        sudo ./build_iso_debian.sh ${{ matrix.edition }}

    # ---------------------------------------------------
    # 5. Verify ISO Existence
    # ---------------------------------------------------
    - name: 🔍 Verify ISO existence
      run: |
        echo "🔍 Checking for ISO file..."
        ISO_PATH=$(find solvionyx_build -type f -name "*.iso*" | head -n 1)
        if [ -z "$ISO_PATH" ]; then
          echo "❌ No ISO found!"
          exit 1
        else
          echo "✅ Found ISO: $ISO_PATH"
        fi

    # ---------------------------------------------------
    # 6. Compress ISO (Auto-memory optimized)
    # ---------------------------------------------------
    - name: 🗜️ Compress Solvionyx ISO
      run: |
        echo "🗜️ Compressing ISO..."
        cd solvionyx_build
        ISO_FILE=$(find . -type f -name "*.iso" | head -n 1)
        if [ -f "$ISO_FILE" ]; then
          echo "Compressing with limited threads..."
          xz -T2 -5 "$ISO_FILE"
          echo "✅ Compression complete."
        else
          echo "⚠️ No raw ISO to compress — skipping."
        fi

    # ---------------------------------------------------
    # 7. Generate SHA256 Checksums
    # ---------------------------------------------------
    - name: 🔐 Generate SHA256 checksums
      run: |
        cd solvionyx_build
        echo "🔐 Generating checksums..."
        sha256sum *.iso.xz > SHA256SUMS.txt
        cat SHA256SUMS.txt

    # ---------------------------------------------------
    # 8. Bootability Verification (EFI + Kernel)
    # ---------------------------------------------------
    - name: 🧩 Verify Bootable ISO Structure
      run: |
        echo "🧩 Verifying bootable components..."
        ISO_FILE=$(find solvionyx_build -name "*.iso.xz" | head -n 1)
        xz -d -k "$ISO_FILE"
        RAW_ISO="${ISO_FILE%.xz}"
        mkdir -p mnt
        sudo mount -o loop "$RAW_ISO" mnt

        if [ ! -f mnt/boot/vmlinuz-* ]; then
          echo "❌ Missing kernel (vmlinuz) file!"
          sudo umount mnt
          exit 1
        fi

        if [ ! -f mnt/EFI/BOOT/BOOTX64.EFI ]; then
          echo "❌ Missing EFI bootloader!"
          sudo umount mnt
          exit 1
        fi

        echo "✅ ISO contains valid EFI + kernel boot structure."
        sudo umount mnt

    # ---------------------------------------------------
    # 9. Configure AWS Credentials
    # ---------------------------------------------------
    - name: ☁️ Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    # ---------------------------------------------------
    # 10. Upload to AWS S3 (Unified Aurora Structure)
    # ---------------------------------------------------
    - name: ☁️ Upload to AWS S3 (Aurora unified structure)
      env:
        S3_BUCKET: solvionyx-releases
      run: |
        VERSION="v${{ github.run_number }}"
        ISO_DIR="solvionyx_build"
        REGION="${{ secrets.AWS_DEFAULT_REGION }}"
        BUCKET_URL="https://solvionyx-releases.s3.${REGION}.amazonaws.com"
        EDITION="${{ matrix.edition }}"
        RELEASE_PATH="aurora/${VERSION}"
        LATEST_PATH="aurora/latest"

        ISO_FILE=$(ls $ISO_DIR/*.iso.xz | head -n 1)
        [ -f "$ISO_FILE" ] || { echo "❌ ISO file not found!"; exit 1; }

        ISO_NAME="Solvionyx-Aurora-${EDITION}-${VERSION}.iso.xz"
        mv "$ISO_FILE" "$ISO_DIR/$ISO_NAME"

        echo "📤 Uploading $ISO_NAME to S3..."
        aws s3 cp "$ISO_DIR/$ISO_NAME" "s3://$S3_BUCKET/$RELEASE_PATH/"
        aws s3 cp "$ISO_DIR/SHA256SUMS.txt" "s3://$S3_BUCKET/$RELEASE_PATH/"
        aws s3 cp "$ISO_DIR/$ISO_NAME" "s3://$S3_BUCKET/$LATEST_PATH/"
        aws s3 cp "$ISO_DIR/SHA256SUMS.txt" "s3://$S3_BUCKET/$LATEST_PATH/"
        echo "✅ Upload complete."

        SHA256_HASH=$(sha256sum "$ISO_DIR/$ISO_NAME" | awk '{print $1}')
        DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

        cat > latest.json <<EOF
        {
          "version": "${VERSION}",
          "release_name": "Solvionyx OS Aurora (${EDITION} Edition)",
          "tagline": "The Engine Behind the Vision.",
          "brand": "Solvionyx OS",
          "edition": "${EDITION}",
          "build_date": "${DATE}",
          "iso_name": "${ISO_NAME}",
          "sha256": "${SHA256_HASH}",
          "download_url": "${BUCKET_URL}/${LATEST_PATH}/${ISO_NAME}",
          "checksum_url": "${BUCKET_URL}/${LATEST_PATH}/SHA256SUMS.txt"
        }
        EOF

        aws s3 cp latest.json "s3://$S3_BUCKET/$LATEST_PATH/latest.json"
        echo "✅ latest.json uploaded."

        # Auto-cleanup old versions (keep latest 5)
        echo "🧹 Cleaning old versions..."
        ALL_VERSIONS=$(aws s3 ls "s3://$S3_BUCKET/aurora/" | awk '{print $2}' | sed 's#/##' | grep '^v[0-9]' | sort -V)
        KEEP=$(echo "$ALL_VERSIONS" | tail -n 5)
        REMOVE=$(echo "$ALL_VERSIONS" | grep -vxFf <(echo "$KEEP") || true)
        for DIR in $REMOVE; do
          echo "🗑️ Removing $DIR"
          aws s3 rm "s3://$S3_BUCKET/aurora/$DIR" --recursive || true
        done
        echo "✅ S3 cleanup complete."

    # ---------------------------------------------------
    # 11. Publish GitHub Release
    # ---------------------------------------------------
    - name: 🚀 Publish GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: Aurora-v${{ github.run_number }}
        name: "Solvionyx OS Aurora (${{ matrix.edition }}) v${{ github.run_number }}"
        body: |
          ## 🧠 Solvionyx OS Aurora
          *The Engine Behind the Vision.*

          ✅ ${{ matrix.edition }} desktop  
          ✅ Calamares installer  
          ✅ Solvionyx branding  
          ✅ Bootable & Live-ready  

          🌐 **AWS S3 (Unified Bucket):**  
          https://solvionyx-releases.s3.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/aurora/latest/

    # ---------------------------------------------------
    # 12. Build Summary
    # ---------------------------------------------------
    - name: 📋 Post Build Summary
      run: |
        echo "🧾 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "✅ Edition: ${{ matrix.edition }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ Verified bootable (EFI + Kernel)" >> $GITHUB_STEP_SUMMARY
        echo "✅ Uploaded to solvionyx-releases bucket" >> $GITHUB_STEP_SUMMARY
        echo "🌍 https://solvionyx-releases.s3.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/aurora/latest/" >> $GITHUB_STEP_SUMMARY
