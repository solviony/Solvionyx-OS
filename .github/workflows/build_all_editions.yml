name: Build & Release Solvionyx OS Aurora (GNOME, XFCE, KDE)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write  # Needed for GitHub Releases

jobs:
  build:
    name: 🧠 Solvionyx OS — Aurora Series (${{ matrix.edition }})
    runs-on: ubuntu-24.04
    timeout-minutes: 120

    strategy:
      fail-fast: false
      matrix:
        edition: [gnome, xfce, kde]

    steps:
    # ---------------------------------------------------
    # 1. Checkout Repository
    # ---------------------------------------------------
    - name: 🧩 Checkout repository
      uses: actions/checkout@v4

    # ---------------------------------------------------
    # 2. Clean Workspace
    # ---------------------------------------------------
    - name: 🧹 Clean workspace before build
      run: |
        echo "🧹 Cleaning previous build files..."
        sudo rm -rf solvionyx_build || true
        sudo rm -rf /home/runner/work/Solvionyx-OS/Solvionyx-OS/solvionyx_build || true
        echo "✅ Workspace cleaned successfully."

    # ---------------------------------------------------
    # 3. Install Dependencies (Safe AWS CLI Handling)
    # ---------------------------------------------------
    - name: ⚙️ Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          debootstrap grub-pc-bin grub-efi-amd64-bin grub-common \
          syslinux isolinux syslinux-utils mtools xorriso squashfs-tools \
          rsync systemd-container genisoimage dosfstools xz-utils jq curl unzip \
          plymouth-theme-spinner python3-pip

        echo "☁️ Checking AWS CLI installation..."
        if ! command -v aws &> /dev/null; then
          echo "🧩 Installing AWS CLI v2..."
          curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -qq awscliv2.zip
          sudo ./aws/install
        else
          echo "✅ AWS CLI already available."
          aws --version
        fi

        echo "✅ Dependencies ready."

    # ---------------------------------------------------
    # 4. Build Solvionyx ISO
    # ---------------------------------------------------
    - name: 💿 Build Solvionyx ISO (${{ matrix.edition }})
      run: |
        echo "🚀 Building Solvionyx OS Aurora — ${{ matrix.edition^ }} Edition..."
        chmod +x build_iso_debian.sh
        sudo bash build_iso_debian.sh ${{ matrix.edition }}
        echo "✅ Build completed successfully."

    # ---------------------------------------------------
    # 5. Verify ISO File
    # ---------------------------------------------------
    - name: 🔍 Verify Solvionyx ISO existence
      run: |
        echo "🔍 Checking for Solvionyx ISO..."
        sudo chmod -R 755 solvionyx_build || true
        ISO_PATH=$(sudo find solvionyx_build -type f -name "*.iso*" 2>/dev/null | head -n 1)
        if [ -z "$ISO_PATH" ]; then
          echo "❌ ISO not found in solvionyx_build."
          sudo ls -l solvionyx_build || true
          exit 1
        else
          echo "✅ ISO found at: $ISO_PATH"
        fi

    # ---------------------------------------------------
    # 6. Compress ISO (if not already)
    # ---------------------------------------------------
    - name: 🗜️ Compress Solvionyx ISO (if not already compressed)
      run: |
        cd solvionyx_build
        if ls *.iso.xz 1> /dev/null 2>&1; then
          echo "✅ ISO already compressed."
        else
          echo "🗜️ Compressing Solvionyx ISO..."
          xz -T0 -9e *.iso
          echo "✅ Compression complete."
        fi

    # ---------------------------------------------------
    # 7. Generate Checksums
    # ---------------------------------------------------
    - name: 🔐 Generate SHA256 checksums (with sudo)
      run: |
        echo "🔐 Generating SHA256 checksums..."
        sudo chmod -R 777 solvionyx_build
        cd solvionyx_build
        sudo bash -c 'sha256sum *.iso.xz > SHA256SUMS.txt'
        sudo chmod 644 SHA256SUMS.txt
        echo "✅ SHA256SUMS.txt created successfully:"
        cat SHA256SUMS.txt

    # ---------------------------------------------------
    # 8. Configure AWS Credentials
    # ---------------------------------------------------
    - name: ☁️ Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    # ---------------------------------------------------
    # 9. Upload to AWS S3
    # ---------------------------------------------------
    - name: ☁️ Upload to AWS S3 (Versioned, Latest, and JSON)
      env:
        S3_BUCKET: solvionyx-releases
      run: |
        EDITION=${{ matrix.edition }}
        echo "☁️ Uploading Solvionyx Aurora ISO (${EDITION}) to S3..."
        VERSION="v${{ github.run_number }}"
        ISO_DIR="solvionyx_build"
        REGION="${{ secrets.AWS_DEFAULT_REGION }}"
        BUCKET_URL="https://solvionyx-releases.s3.${REGION}.amazonaws.com"

        ISO_FILE=$(ls $ISO_DIR/*.iso.xz | head -n 1)
        [ -f "$ISO_FILE" ] || { echo "❌ No ISO file found!"; exit 1; }

        # Upload to versioned and latest directories
        aws s3 cp "$ISO_FILE" "s3://$S3_BUCKET/aurora/${EDITION}/$VERSION/"
        aws s3 cp "$ISO_DIR/SHA256SUMS.txt" "s3://$S3_BUCKET/aurora/${EDITION}/$VERSION/"
        aws s3 cp "$ISO_FILE" "s3://$S3_BUCKET/aurora/${EDITION}/latest/"
        aws s3 cp "$ISO_DIR/SHA256SUMS.txt" "s3://$S3_BUCKET/aurora/${EDITION}/latest/"
        echo "✅ Upload complete."

        # Create edition-specific latest.json
        ISO_NAME=$(basename "$ISO_FILE")
        SHA256_HASH=$(sha256sum "$ISO_FILE" | awk '{print $1}')
        DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

        cat > latest.json <<EOF
        {
          "version": "${VERSION}",
          "release_name": "Solvionyx OS Aurora (${EDITION^} Edition)",
          "tagline": "The engine behind the vision.",
          "brand": "Solvionyx OS",
          "edition": "${EDITION}",
          "build_date": "${DATE}",
          "iso_name": "${ISO_NAME}",
          "sha256": "${SHA256_HASH}",
          "download_url": "${BUCKET_URL}/aurora/${EDITION}/latest/${ISO_NAME}",
          "checksum_url": "${BUCKET_URL}/aurora/${EDITION}/latest/SHA256SUMS.txt"
        }
        EOF

        aws s3 cp latest.json "s3://$S3_BUCKET/aurora/${EDITION}/latest/latest.json"
        echo "✅ latest.json uploaded successfully."

        # 🔥 Auto-clean old S3 versions (keep only latest 5)
        echo "🧹 Cleaning old Aurora versions on S3 for ${EDITION}..."
        ALL_VERSIONS=$(aws s3 ls "s3://$S3_BUCKET/aurora/${EDITION}/" | awk '{print $2}' | sed 's#/##' | grep '^v[0-9]' | sort -V)
        KEEP=$(echo "$ALL_VERSIONS" | tail -n 5)
        REMOVE=$(echo "$ALL_VERSIONS" | grep -vxFf <(echo "$KEEP") || true)
        for DIR in $REMOVE; do
          echo "🗑️ Removing old version: $DIR"
          aws s3 rm "s3://$S3_BUCKET/aurora/${EDITION}/$DIR" --recursive || true
        done
        echo "✅ S3 cleanup complete."

    # ---------------------------------------------------
    # 10. Publish GitHub Release
    # ---------------------------------------------------
    - name: 🚀 Publish GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: Aurora-${{ matrix.edition }}-v${{ github.run_number }}
        name: "Solvionyx Aurora OS (${{ matrix.edition^ }}) v${{ github.run_number }}"
        body: |
          ## 🧠 Solvionyx OS Aurora (${{ matrix.edition^ }} Edition)
          *The Engine Behind the Vision.*

          ✅ ${{ matrix.edition^ }} desktop  
          ✅ Calamares installer  
          ✅ Solvionyx branding  
          ✅ Live boot (casper)  

          🌐 **AWS S3:**  
          https://solvionyx-releases.s3.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/aurora/${{ matrix.edition }}/latest/

    # ---------------------------------------------------
    # 11. Upload Unified Series Index (only runs once after builds)
    # ---------------------------------------------------
  update-index:
    name: 🌐 Update Unified Aurora Series Index
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: ☁️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: 🧩 Generate series_index.json
        run: |
          S3_BUCKET=solvionyx-releases
          REGION=${{ secrets.AWS_DEFAULT_REGION }}
          BUCKET_URL="https://solvionyx-releases.s3.${REGION}.amazonaws.com"

          echo "🌐 Fetching latest edition metadata..."
          mkdir -p aurora_meta
          for edition in gnome xfce kde; do
            aws s3 cp "s3://$S3_BUCKET/aurora/${edition}/latest/latest.json" "aurora_meta/${edition}.json" || true
          done

          echo "🧠 Building unified series index..."
          jq -s '{series: "Solvionyx Aurora", editions: .}' aurora_meta/*.json > series_index.json
          cat series_index.json

          echo "☁️ Uploading to S3..."
          aws s3 cp series_index.json "s3://$S3_BUCKET/aurora/latest/series_index.json"
          echo "✅ series_index.json uploaded successfully."
