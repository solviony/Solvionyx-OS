name: Build & Release Solvionyx OS Aurora (GNOME)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Aurora (GNOME)
    runs-on: ubuntu-24.04
    timeout-minutes: 120

    steps:
    - name: 🧩 Checkout repository
      uses: actions/checkout@v4

    - name: ⚙️ Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          debootstrap grub-pc-bin grub-efi-amd64-bin grub-common \
          syslinux isolinux syslinux-utils mtools xorriso squashfs-tools \
          rsync systemd-container genisoimage dosfstools xz-utils plymouth-theme-spinner

    - name: 🧠 Run Solvionyx Aurora ISO Builder
      run: |
        chmod +x build_iso_debian.sh
        sudo bash build_iso_debian.sh

    - name: 🔍 Verify ISO existence (supports .iso or .iso.xz)
      run: |
        echo "🔍 Checking for built ISO in solvionyx_build..."
        sudo find solvionyx_build -type f \( -name "*.iso" -o -name "*.iso.xz" \) -exec ls -lh {} \;
        ISO_PATH=$(sudo find solvionyx_build -type f \( -name "*.iso" -o -name "*.iso.xz" \) | head -n1 || true)
        if [ -z "$ISO_PATH" ]; then
          echo "❌ No ISO or compressed ISO found after build!"
          exit 1
        else
          echo "✅ Found ISO: $ISO_PATH"
        fi
        echo "$ISO_PATH" > iso_path.txt

    - name: 🧹 Normalize permissions
      run: |
        echo "🔧 Fixing file permissions..."
        ISO_PATH=$(cat iso_path.txt)
        sudo chmod -R 777 "$(dirname "$ISO_PATH")"
        sudo chown -R $USER:$USER "$(dirname "$ISO_PATH")"

    - name: 🗜️ Skip redundant compression if already compressed
      run: |
        ISO_PATH=$(cat iso_path.txt)
        if [[ "$ISO_PATH" == *.xz ]]; then
          echo "🗜️ ISO is already compressed. Skipping compression."
        else
          echo "🗜️ Compressing ISO..."
          cd "$(dirname "$ISO_PATH")"
          FILE=$(basename "$ISO_PATH")
          xz -T0 -9e "$FILE"
          ISO_PATH="$FILE.xz"
          echo "$ISO_PATH" > iso_path.txt
        fi
        echo "✅ Compression verified or complete."

    - name: 🔐 Generate checksums
      run: |
        echo "🔐 Generating SHA256 checksums..."
        ISO_DIR=$(dirname "$(cat iso_path.txt)")
        cd "$ISO_DIR"
        sudo sha256sum *.xz > SHA256SUMS.txt
        sudo chmod 644 SHA256SUMS.txt
        cat SHA256SUMS.txt

    - name: ☁️ Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: ☁️ Upload to AWS S3 (Versioned and Latest)
      run: |
        echo "🌍 Uploading ISO and checksums to S3..."
        VERSION="v${{ github.run_number }}"
        S3_BUCKET=${{ secrets.S3_BUCKET }}
        REGION=${{ secrets.AWS_DEFAULT_REGION }}
        ISO_DIR=$(dirname "$(cat iso_path.txt)")

        aws s3 cp "$ISO_DIR"/*.iso.xz s3://$S3_BUCKET/aurora/$VERSION/ --acl public-read
        aws s3 cp "$ISO_DIR"/SHA256SUMS.txt s3://$S3_BUCKET/aurora/$VERSION/ --acl public-read

        # Update "latest" alias
        aws s3 cp "$ISO_DIR"/*.iso.xz s3://$S3_BUCKET/aurora/latest/ --acl public-read
        aws s3 cp "$ISO_DIR"/SHA256SUMS.txt s3://$S3_BUCKET/aurora/latest/ --acl public-read

        echo "✅ Upload completed successfully."
        echo "VERSION=$VERSION" >> build_info.txt
        echo "S3_BUCKET=$S3_BUCKET" >> build_info.txt
        echo "REGION=$REGION" >> build_info.txt

    - name: 🚀 Publish GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: Aurora-v${{ github.run_number }}
        name: "Solvionyx Aurora OS (GNOME) v${{ github.run_number }}"
        body: |
          **Solvionyx OS Aurora (GNOME Edition)**  
          Tagline: *"The engine behind the vision."*

          ✅ GNOME desktop  
          ✅ Calamares installer  
          ✅ Solvionyx branding  
          ✅ Live boot support  

          🌍 **Downloads (AWS S3):**
          • [Versioned ISO](https://${{ secrets.S3_BUCKET }}.s3.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/aurora/v${{ github.run_number }}/Solvionyx-Aurora-v${{ github.run_number }}.iso.xz)  
          • [Latest ISO](https://${{ secrets.S3_BUCKET }}.s3.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/aurora/latest/Solvionyx-Aurora-latest.iso.xz)  

          📜 **Checksums:**
          • [Versioned SHA256SUMS](https://${{ secrets.S3_BUCKET }}.s3.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/aurora/v${{ github.run_number }}/SHA256SUMS.txt)  
          • [Latest SHA256SUMS](https://${{ secrets.S3_BUCKET }}.s3.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/aurora/latest/SHA256SUMS.txt)

    - name: 🧾 Post Build Summary
      if: always()
      run: |
        echo "🧾 Build Summary" >> $GITHUB_STEP_SUMMARY
        VERSION=$(cat build_info.txt | grep VERSION | cut -d'=' -f2)
        S3_BUCKET=$(cat build_info.txt | grep S3_BUCKET | cut -d'=' -f2)
        REGION=$(cat build_info.txt | grep REGION | cut -d'=' -f2)

        echo "✅ **Solvionyx OS Aurora Build Completed**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🌍 **Versioned Download:**" >> $GITHUB_STEP_SUMMARY
        echo "https://$S3_BUCKET.s3.$REGION.amazonaws.com/aurora/$VERSION/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🌍 **Latest Download:**" >> $GITHUB_STEP_SUMMARY
        echo "https://$S3_BUCKET.s3.$REGION.amazonaws.com/aurora/latest/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🧩 Job completed successfully ✅" >> $GITHUB_STEP_SUMMARY
