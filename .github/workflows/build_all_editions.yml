name: Build & Release Solvionyx OS — Aurora (GNOME/XFCE/KDE)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  build:
    name: 🧠 Solvionyx OS — Aurora (${{ matrix.edition }})
    runs-on: ubuntu-24.04
    timeout-minutes: 180

    strategy:
      matrix:
        edition: [gnome, xfce, kde]
      fail-fast: false

    env:
      GCS_BUCKET: solvionyx-os
      GCP_PROJECT: iconic-biplane-476304-u8
      VERSION: v${{ github.run_number }}
      ISO_DIR: solvionyx_build
      BRAND_LOGO: branding/4023.png
      BRAND_BG: branding/4022.jpg

    steps:
      # ---------------------------------------------------
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4

      # ---------------------------------------------------
      - name: ⚙️ Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            debootstrap grub-pc-bin grub-efi-amd64-bin grub-common \
            syslinux isolinux syslinux-utils mtools xorriso squashfs-tools \
            rsync systemd-container genisoimage dosfstools xz-utils jq curl unzip \
            plymouth plymouth-themes plymouth-label imagemagick \
            calamares calamares-settings-debian qml-module-qtquick-controls2 \
            qml-module-qtquick-layouts qml-module-qtgraphicaleffects zenity

      # ---------------------------------------------------
      - name: 🔐 Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCS_CREDENTIALS_JSON }}

      - name: ☁️ Install gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT }}
          install_components: 'gsutil'

      - name: 🔎 Verify GCS Access
        run: |
          gsutil ls "gs://${GCS_BUCKET}" || (echo "❌ Cannot access bucket!" && exit 1)
          echo "✅ GCS bucket is reachable."

      # ---------------------------------------------------
      - name: 🎨 Ensure branding assets
        run: |
          mkdir -p branding
          if [ ! -f "${BRAND_LOGO}" ]; then
            echo "⚠️ ${BRAND_LOGO} missing — generating fallback logo..."
            convert -size 512x128 xc:none -gravity center \
              -fill '#5bb0ff' -pointsize 64 -annotate 0 'SOLVIONYX' "${BRAND_LOGO}"
          fi
          if [ ! -f "${BRAND_BG}" ]; then
            echo "⚠️ ${BRAND_BG} missing — generating fallback background..."
            convert -size 3840x2160 gradient:'#000428-#004e92' "${BRAND_BG}"
          fi

      # ---------------------------------------------------
      - name: 💿 Build Solvionyx OS ISO (${{ matrix.edition }})
        run: |
          chmod +x build_iso_debian.sh
          export SOLVIONYX_LOGO_PATH="${BRAND_LOGO}"
          export SOLVIONYX_BG_PATH="${BRAND_BG}"
          ./build_iso_debian.sh "${{ matrix.edition }}"

      # ---------------------------------------------------
      - name: 🗜️ Compress ISO
        run: |
          cd "${ISO_DIR}"
          RAW_ISO=$(ls *.iso 2>/dev/null | head -n 1 || true)
          if [ -n "$RAW_ISO" ] && [ ! -f "${RAW_ISO}.xz" ]; then
            echo "🗜️ Compressing $RAW_ISO..."
            xz -T2 -5 "${RAW_ISO}"
          fi

      # ---------------------------------------------------
      - name: 🔐 Generate SHA256 Checksums
        run: |
          cd "${ISO_DIR}"
          sha256sum *.iso.xz > SHA256SUMS.txt
          cat SHA256SUMS.txt

      # ---------------------------------------------------
      - name: 🧩 Verify Bootable ISO Structure
        run: |
          ISO_FILE=$(find "${ISO_DIR}" -name "*.iso.xz" | head -n 1)
          xz -d -k "$ISO_FILE"
          RAW_ISO="${ISO_FILE%.xz}"
          mkdir -p mnt
          sudo mount -o ro,loop "$RAW_ISO" mnt 2>/dev/null

          echo "🔍 Checking kernel in /boot, /live, /casper..."
          FOUND_KERNEL=""
          for dir in boot live casper; do
            if sudo ls mnt/$dir/vmlinuz* >/dev/null 2>&1; then FOUND_KERNEL=$dir; break; fi
          done

          if [ -z "$FOUND_KERNEL" ]; then
            echo "❌ No kernel found under /boot, /live, or /casper"
            ls -R mnt/live mnt/casper 2>/dev/null || true
            sudo umount mnt; exit 1
          fi
          echo "✅ Kernel found in /$FOUND_KERNEL/"

          echo "🔍 Checking for EFI or BIOS boot..."
          if [ -f mnt/EFI/BOOT/BOOTX64.EFI ] || [ -f mnt/boot/grub/efi.img ]; then
            echo "✅ EFI bootloader detected."
          elif [ -f mnt/isolinux/isolinux.bin ]; then
            echo "✅ BIOS bootloader detected."
          else
            echo "⚠️ Bootloader missing!"; sudo umount mnt; exit 1
          fi

          sudo umount mnt
          echo "✅ Bootable ISO verified (UEFI + BIOS)."

      # ---------------------------------------------------
      - name: ☁️ Upload to Google Cloud Storage (UBLA)
        env:
          EDITION: ${{ matrix.edition }}
        run: |
          ISO_FILE=$(ls ${ISO_DIR}/*.iso.xz | head -n 1)
          SHA_FILE="${ISO_DIR}/SHA256SUMS.txt"
          ISO_NAME=$(basename "$ISO_FILE")
          VERSION_PATH="aurora/${VERSION}/${EDITION}"
          LATEST_PATH="aurora/latest/${EDITION}"
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          SHA256=$(sha256sum "$ISO_FILE" | awk '{print $1}')

          echo "📤 Uploading to GCS (no ACLs, uniform access)..."
          gsutil -m cp -n "$ISO_FILE" "gs://${GCS_BUCKET}/${VERSION_PATH}/"
          gsutil -m cp -n "$SHA_FILE" "gs://${GCS_BUCKET}/${VERSION_PATH}/"
          gsutil -m cp -n "$ISO_FILE" "gs://${GCS_BUCKET}/${LATEST_PATH}/"
          gsutil -m cp -n "$SHA_FILE" "gs://${GCS_BUCKET}/${LATEST_PATH}/"

          echo "🧾 Writing latest.json..."
          cat > latest.json <<EOF
          {
            "version": "${VERSION}",
            "edition": "${EDITION}",
            "release_name": "Solvionyx OS Aurora (${EDITION})",
            "tagline": "The Engine Behind the Vision.",
            "brand": "Solvionyx OS",
            "build_date": "${DATE}",
            "iso_name": "${ISO_NAME}",
            "sha256": "${SHA256}",
            "download_url": "https://storage.googleapis.com/${GCS_BUCKET}/${LATEST_PATH}/${ISO_NAME}",
            "checksum_url": "https://storage.googleapis.com/${GCS_BUCKET}/${LATEST_PATH}/SHA256SUMS.txt"
          }
          EOF
          gsutil -m cp -n latest.json "gs://${GCS_BUCKET}/${LATEST_PATH}/latest.json"

          echo "🧠 Setting cache headers (1h refresh)..."
          gsutil setmeta -h "Cache-Control:public, max-age=3600" \
            "gs://${GCS_BUCKET}/${LATEST_PATH}/${ISO_NAME}" \
            "gs://${GCS_BUCKET}/${LATEST_PATH}/SHA256SUMS.txt" \
            "gs://${GCS_BUCKET}/${LATEST_PATH}/latest.json" || true
          echo "✅ Upload complete."

      # ---------------------------------------------------
      - name: 📦 Upload ISO Artifact to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: Solvionyx-Aurora-${{ matrix.edition }}-${{ env.VERSION }}
          path: |
            solvionyx_build/*.iso.xz
            solvionyx_build/SHA256SUMS.txt

      # ---------------------------------------------------
      - name: 🧹 Cleanup Old Versions (keep 5)
        env:
          EDITION: ${{ matrix.edition }}
        run: |
          PREFIX="gs://${GCS_BUCKET}/aurora/"
          versions=$(gsutil ls "${PREFIX}" | grep "/v[0-9]" | sed 's#^.*/v#v#' | sort -V)
          keep=$(echo "$versions" | tail -n 5)
          remove=$(echo "$versions" | grep -vxFf <(echo "$keep") || true)
          for v in $remove; do
            echo "🗑️ Removing old version: $v"
            gsutil -m rm -r "${PREFIX}${v}/${EDITION}/" || true
          done
          echo "✅ Cleanup complete."

      # ---------------------------------------------------
      - name: 🚀 Publish GitHub Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "Aurora-${{ matrix.edition }}-${{ env.VERSION }}"
          name: "Solvionyx OS — Aurora (${{ matrix.edition }}) ${{ env.VERSION }}"
          body: |
            ## 🌌 Solvionyx OS — Aurora (${{ matrix.edition }})
            *The Engine Behind the Vision.*

            ✅ Bootable ISO (UEFI + BIOS verified)
            ✅ Solvionyx branding (boot, desktop, installer)
            ✅ Calamares installer included
            ✅ Uploaded to Google Cloud Storage
            ✅ GCS Bucket: solvionyx-os
            ✅ Available as GitHub Artifact

            **Latest Build:**
            https://storage.googleapis.com/${{ env.GCS_BUCKET }}/aurora/latest/${{ matrix.edition }}/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
