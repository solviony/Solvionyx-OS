name: Build & Release Solvionyx OS — Aurora Series (GCS Edition)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write  # Required for GitHub Releases

jobs:
  build:
    name: 🌌 Solvionyx OS — Aurora (${{ matrix.edition }})
    runs-on: ubuntu-24.04
    timeout-minutes: 120

    strategy:
      matrix:
        edition: [gnome, xfce, kde]
      fail-fast: false

    steps:
    - name: 🧩 Checkout repository
      uses: actions/checkout@v4

    - name: ⚙️ Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          debootstrap grub-pc-bin grub-efi-amd64-bin grub-common \
          syslinux isolinux xorriso squashfs-tools rsync mtools genisoimage \
          systemd-container dosfstools xz-utils jq curl unzip python3-pip

        echo "🧠 Installing Google Cloud SDK..."
        sudo apt-get install -y google-cloud-sdk

    - name: 💿 Build Solvionyx OS ISO (${{ matrix.edition }})
      run: |
        chmod +x build_iso_debian.sh
        echo "🚀 Starting Aurora build for: ${{ matrix.edition }}"
        sudo ./build_iso_debian.sh ${{ matrix.edition }}

    - name: 🔍 Verify ISO existence
      run: |
        ISO_PATH=$(find solvionyx_build -type f -name "*.iso*" | head -n 1)
        if [ -z "$ISO_PATH" ]; then
          echo "❌ No ISO found!"
          exit 1
        fi
        echo "✅ ISO found: $ISO_PATH"

    - name: 🗜️ Compress ISO
      run: |
        cd solvionyx_build
        ISO_FILE=$(find . -type f -name "*.iso" | head -n 1)
        if [ -f "$ISO_FILE" ]; then
          xz -T2 -5 "$ISO_FILE"
          echo "✅ Compression complete."
        fi

    - name: 🔐 Generate SHA256 checksum
      run: |
        cd solvionyx_build
        sha256sum *.iso.xz > SHA256SUMS.txt
        cat SHA256SUMS.txt

    - name: 🧩 Verify Bootable ISO Structure & Branding
      run: |
        ISO_FILE=$(find solvionyx_build -name "*.iso.xz" | head -n 1)
        xz -d -k "$ISO_FILE"
        RAW_ISO="${ISO_FILE%.xz}"
        mkdir -p mnt
        sudo mount -o loop "$RAW_ISO" mnt
        if [ ! -f mnt/EFI/BOOT/BOOTX64.EFI ]; then
          echo "❌ Missing EFI bootloader!"
          sudo umount mnt
          exit 1
        fi
        echo "✅ EFI structure verified."
        sudo umount mnt

    - name: ☁️ Authenticate with Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCS_CREDENTIALS_JSON }}

    - name: ☁️ Upload ISO to Google Cloud Storage
      run: |
        echo "🚀 Uploading Solvionyx ISO to GCS..."
        BUCKET="solvionyx-os"
        ISO_FILE=$(ls solvionyx_build/*.iso.xz | head -n 1)
        SHA_FILE="solvionyx_build/SHA256SUMS.txt"
        DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        VERSION="v${{ github.run_number }}"
        EDITION="${{ matrix.edition }}"
        RELEASE_PATH="aurora/${EDITION}/${VERSION}"
        LATEST_PATH="aurora/${EDITION}/latest"

        # Upload ISO & checksum
        gsutil cp "$ISO_FILE" "gs://$BUCKET/$RELEASE_PATH/"
        gsutil cp "$SHA_FILE" "gs://$BUCKET/$RELEASE_PATH/"

        # Update latest
        gsutil cp "$ISO_FILE" "gs://$BUCKET/$LATEST_PATH/"
        gsutil cp "$SHA_FILE" "gs://$BUCKET/$LATEST_PATH/"

        # Generate latest.json metadata
        ISO_NAME=$(basename "$ISO_FILE")
        SHA256_HASH=$(sha256sum "$ISO_FILE" | awk '{print $1}')
        cat > latest.json <<EOF
        {
          "version": "${VERSION}",
          "edition": "${EDITION}",
          "release_name": "Solvionyx OS Aurora (${EDITION} Edition)",
          "tagline": "The Engine Behind the Vision.",
          "brand": "Solvionyx OS",
          "build_date": "${DATE}",
          "iso_name": "${ISO_NAME}",
          "sha256": "${SHA256_HASH}",
          "download_url": "https://storage.googleapis.com/${BUCKET}/aurora/${EDITION}/latest/${ISO_NAME}",
          "checksum_url": "https://storage.googleapis.com/${BUCKET}/aurora/${EDITION}/latest/SHA256SUMS.txt"
        }
        EOF
        gsutil cp latest.json "gs://$BUCKET/$LATEST_PATH/latest.json"
        echo "✅ Upload and metadata generation complete."

    - name: 🔓 Make GCS files public
      run: |
        BUCKET="solvionyx-os"
        gsutil iam ch allUsers:objectViewer gs://$BUCKET
        echo "✅ Public access set for Solvionyx OS releases."

    - name: 🧹 Cleanup old GCS versions
      run: |
        BUCKET="solvionyx-os"
        EDITION="${{ matrix.edition }}"
        KEEP=5
        echo "🧹 Cleaning old builds..."
        VERSIONS=$(gsutil ls gs://$BUCKET/aurora/$EDITION/ | grep 'v[0-9]' | sort -V)
        REMOVE=$(echo "$VERSIONS" | head -n -$KEEP)
        for v in $REMOVE; do
          echo "🗑️ Removing $v"
          gsutil -m rm -r "$v"
        done
        echo "✅ Cleanup complete."

    - name: 🚀 Publish GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: Aurora-v${{ github.run_number }}
        name: "Solvionyx OS Aurora (${{ matrix.edition }}) v${{ github.run_number }}"
        body: |
          🧠 Solvionyx OS Aurora — *The Engine Behind the Vision.*
          ✅ Edition: ${{ matrix.edition }}
          🌐 Download:
          https://storage.googleapis.com/solvionyx-os/aurora/${{ matrix.edition }}/latest/

    - name: 📋 Build Summary
      run: |
        echo "🧾 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "✅ Edition: ${{ matrix.edition }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ Uploaded to GCS bucket: solvionyx-os" >> $GITHUB_STEP_SUMMARY
        echo "🌐 Public URL: https://storage.googleapis.com/solvionyx-os/aurora/${{ matrix.edition }}/latest/" >> $GITHUB_STEP_SUMMARY
